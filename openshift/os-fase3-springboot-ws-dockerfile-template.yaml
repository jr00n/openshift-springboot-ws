apiVersion: v1
kind: List
metadata:
  name: springboot-ws-dockerfile
items:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: springboot-ws-dockerfile
    name: springboot-ws-dockerfile
  spec: {}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: springboot-ws-dockerfile
    name: springboot-ws-dockerfile
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: springboot-ws-dockerfile:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      dockerfile: |-
          FROM jboss/base-jdk:8
          ADD fatjar.jar fatjar.jar
          CMD java -Djava.security.egd=file:/dev/./urandom -jar fatjar.jar
      binary: {}
      type: Dockerfile
    strategy:
        dockerStrategy:
          from:
            kind: DockerImage
            name: "jboss/base-jdk:8"
        type: Docker
    triggers: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: springboot-ws-dockerfile
    name: springboot-ws-dockerfile
  spec:
    replicas: 1
    selector:
      app: springboot-ws-dockerfile
      deploymentconfig: springboot-ws-dockerfile
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: springboot-ws-dockerfile
          deploymentconfig: springboot-ws-dockerfile
      spec:
        containers:
        - image: springboot-ws-dockerfile:latest
          imagePullPolicy: Always
          name: springboot-ws-dockerfile
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - springboot-ws-dockerfile
        from:
          kind: ImageStreamTag
          name: springboot-ws-dockerfile:latest
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: springboot-ws-dockerfile
    name: springboot-ws-dockerfile
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: springboot-ws-dockerfile
      deploymentconfig: springboot-ws-dockerfile
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    name: springboot-ws-dockerfile
    labels:
      app: springboot-ws-dockerfile
  spec:
    to:
      kind: Service
      name: springboot-ws-dockerfile
      weight: 100
    port:
      targetPort: 8080-tcp
    wildcardPolicy: None